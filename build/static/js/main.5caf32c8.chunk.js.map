{"version":3,"sources":["SeasonDisplay.js","TestLoader.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","season","Date","getMonth","className","TestLoader","class","message","defaultProps","App","state","errorMassage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","errorMessage","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"8MAIMA,EAAe,CACjBC,OAAQ,CACJC,KAAM,qBACNC,SAAU,UAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,cA6BHE,EAhBO,SAACC,GACnB,IAVeC,EAUTC,GAVSD,EAUUD,EAAMC,IAT5B,GASiC,IAAIE,MAAOC,SAThC,EACJH,EAAI,EAAG,SAAU,SAGjBA,EAAI,EAAI,SAAW,UAID,EAEHP,EAAaQ,GAAhCN,EAFsB,EAEtBA,KAAMC,EAFgB,EAEhBA,SAEb,OACQ,sBAAKQ,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,UAAKR,EAAL,6BACZ,6BACKD,IAEL,mBAAGS,UAAS,UAAKR,EAAL,kCChCtBS,G,MAAa,SAACN,GAClB,OACI,qBAAKO,MAAM,mBAAX,SACE,qBAAKA,MAAM,qBAAX,SAAiCP,EAAMQ,cAK/CF,EAAWG,aAAa,CACpBD,QAAS,eAGEF,QCRTI,E,4MACJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,uDAEnC,WAAqB,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAEI,aAAcD,EAAIb,e,2BAI/C,WACE,OAAIe,KAAKZ,MAAMW,eAAiBC,KAAKZ,MAAMV,IAChC,2CAAcsB,KAAKZ,MAAMW,aAAzB,QAEJC,KAAKZ,MAAMW,cAAgBC,KAAKZ,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAKsB,KAAKZ,MAAMV,MAEnCsB,KAAKZ,MAAMW,cAAiBC,KAAKZ,MAAMV,SAA5C,EACS,cAAC,EAAD,CAAYO,QAAQ,sC,oBAIjC,WACE,OACI,qBAAKH,UAAU,aAAf,SACKkB,KAAKC,sB,GAzBAC,IAAMC,WA+BxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.5caf32c8.chunk.js","sourcesContent":["import React from 'react';\nimport \"./SeasonDisplay.css\";\n\n\nconst seasonConfig = {\n    summer: {\n        text: 'Lets hit the beach',\n        iconName: 'winter'\n    },\n    winter: {\n        text: 'Burr, it is chilly',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n    if(2 < month < 9){\n        return lat>0? 'summer': 'winter';\n    }\n    else{\n        return lat<0 ? 'winter' : 'summer';\n    }\n}\n\nconst SeasonDisplay = (props) => {\n    const season = getSeason(props.lat, new Date().getMonth);\n    const {text, iconName } = seasonConfig[season];\n\n    return (\n            <div className={`season-display ${season}`} >\n                <i className={`${iconName} icon massive icon-left`} />\n                <h1>\n                    {text}\n                </h1>\n                <i className={`${iconName} icon massive icon-right`} />\n            </div>\n\n    );\n}\n\nexport default SeasonDisplay;","import React from \"react\";\n\nconst TestLoader = (props) => {\n  return (\n      <div class=\"ui active dimmer\">\n        <div class=\"ui big text loader\">{props.message}</div>\n      </div>\n  );\n};\n\nTestLoader.defaultProps={\n    message: 'Loading ...'\n}\n\nexport default TestLoader;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport TestLoader from './TestLoader';\n\nclass App extends React.Component {\n  state = { lat: null, errorMassage: \"\" };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => this.setState({ lat: position.coords.latitude }),\n      (err) => this.setState({ errorMessage: err.message })\n    );\n  }\n\n  renderContent(){\n    if (this.state.errorMessage && !this.state.lat) {\n        return <div> Error: {this.state.errorMessage} </div>;\n      }\n      if (!this.state.errorMessage && this.state.lat) {\n        return <SeasonDisplay lat={this.state.lat}/>;\n      }\n      if (!this.state.errorMessage && !this.state.lat) {\n        return <TestLoader message=\"Please accept location resquest\"/>;\n      }\n  }\n\n  render() {\n    return(\n        <div className=\"border red\">\n            {this.renderContent()}\n        </div>\n    )\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}